{"version":3,"sources":["main.js"],"names":["str","regexp","console","log","match","test","replace","regexp1"],"mappings":"AAAA;AACA,IAAMA,GAAG,+KAAT,EAQA;;AACA,IAAMC,MAAM,GAAG,OAAf;AAEAC,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACI,KAAJ,CAAUH,MAAV,CAAZ,GAAwC;;AACxCC,OAAO,CAACC,GAAR,CAAY,mDAAZ;AACAD,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACI,IAAP,CAAYL,GAAZ,CAAZ;AACAE,OAAO,CAACC,GAAR,CAAY,mDAAZ,GACA;;AACAD,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACM,OAAJ,CAAYL,MAAZ,EAAoB,KAApB,CAAZ,GACA;;AAEA,IAAMM,OAAO,GAAG,OAAhB;AACAL,OAAO,CAACC,GAAR,CAAY,mDAAZ;AACAD,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACI,KAAJ,CAAUG,OAAV,CAAZ;AACAL,OAAO,CAACC,GAAR,CAAY,mDAAZ;AAEAD,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACI,KAAJ,CAAU,OAAV,CAAZ,GAAwC;AACxC;;AACAF,OAAO,CAACC,GAAR,CAAY,mDAAZ;AACAD,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACI,KAAJ,CAAU,QAAV,CAAZ,GAAyC;;AACzCF,OAAO,CAACC,GAAR,CAAY,mDAAZ;AAEAD,OAAO,CAACC,GAAR,CACIH,GAAG,CAACI,KAAJ,CAAU,MAAV,CADJ;AAGAF,OAAO,CAACC,GAAR,CACIH,GAAG,CAACI,KAAJ,CAAU,MAAV,CADJ","file":"main.1f19ae8e.js","sourceRoot":"..","sourcesContent":["// `(빽틱) 기호로 문자 데이터를 만들면 안에 줄바꿈이 가능함\r\nconst str = `\r\n    010-1234-5678\r\n    thesecon@gmail.com\r\n    https://www.omdbapi.com/?apikey=7035c60c&s=frozen\r\n    The quick brown fox jumps over the lazy dog.\r\n    abbcccdddd\r\n    `\r\n\r\n// const regexp = new RegExp('the', 'gi');  // 여기서 g에 해당하는 애들을 flag라고 부른다\r\nconst regexp = /fox/gi;\r\n\r\nconsole.log(str.match(regexp))          // 배열 데이터가 되는데 그 index 중 0번만 확인하면 됌\r\nconsole.log('=================================================')\r\nconsole.log(regexp.test(str));\r\nconsole.log('=================================================')\r\n// str.replace(정규식, '대체문자') => 정규식에 해당하는 문자를 대체문자로 전환\r\nconsole.log(str.replace(regexp, 'AAA'));   \r\n// str = str.replace(regexp, 'AAA');\r\n\r\nconst regexp1 = /the/gi\r\nconsole.log('=================================================')\r\nconsole.log(str.match(regexp1));\r\nconsole.log('=================================================')\r\n\r\nconsole.log(str.match(/\\.$/gi));        // 문자 데이터의 끝 부분이 . 인지 찾는 패턴\r\n// m옵션으로 시각적으로 보이는 각각의 줄에 있는 데이터 검색 시 m 플래그 사용\r\nconsole.log('=================================================')\r\nconsole.log(str.match(/\\.$/gim));        // 문자 데이터의 끝 부분이 . 인지 찾는 패턴\r\nconsole.log('=================================================')\r\n\r\nconsole.log(\r\n    str.match(/d$/gm)\r\n);\r\nconsole.log(\r\n    str.match(/^t/gm)\r\n);\r\n\r\n\r\n\r\n"]}